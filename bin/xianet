#! /usr/bin/env bash
#
# Copyright 2013/2016 Carnegie Mellon University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# find the root of the XIA source tree
# assumes this script is in a directory off the parent of the XIA tree
# and that the daemons it starts are rooted off of the same location
#  so XIADIR would be /xia-core assuming the script were /xia-core/bin/xianet
XIADIR="$(dirname "$(cd "$(dirname "$0")" && pwd)")"

VERSION=2.0

# click parameters
CLICKPATH=$XIADIR/click
CONFPATH=$XIADIR/etc/click/
CLICK=$CLICKPATH/userlevel/click
SCRIPT=""

NODECONF=$XIADIR/etc/nodes.conf
ADDRCONF=$XIADIR/etc/address.conf
RESOLVCONF=$XIADIR/etc/resolv.conf

ALL_PROCESSES="click xrouted xnetjd xcache xnameservice xstats xstatserver stored"

NAME=`basename $0`
VERBOSE=0
LOG_FLAGS=""
LOG_LEVEL=6
V_FLAG="-q"
CLICK_ONLY=0
NO_CLICK=0
NAMESERVER=0
RENDEZVOUS=0
REMOTEDSRC=0
RUN_VISUALIZER_CLIENT=0
RUN_VISUALIZER_SERVER=0
VISUALIZER_SERVER="localhost"
MAKECONF=""
CONFFLAGS=""
L2_TYPE="ethernet"      # "dsrc" is the only other supported

# On Arada boxes, don't use -s because /etc/hosts has no entry for hostname
MACHINE=`uname -m`
if [ "$MACHINE" == "mips" ]; then
	HOSTNAME=$(hostname | tr -C -d 'a-zA-Z0-9')
else
	HOSTNAME=$(hostname -s | tr -C -d 'a-zA-Z0-9')
fi

# for debugging
VALGRIND=""
VGLOG="valgrind.log"

help()
{
	cat << EOH

Start or stop the XIA network services.

usage: $NAME [-cCvV48rtnZg] [-l <loglevel>] [-i <hostname>] [-m <ip-addr>]
			 [-f <filter_str>] [-P <socket-ports>]
			 [-W <dsrc_mac_addr>,<arada_ip_addr>:<waveserver_port_num>]
			 [-s <script>] [-z <statserver>] start|stop|check|kill|restart

Commands:
 start    starts the XIA network processes if not already running
 stop     stops the XIA processes
 check    print service status
 kill     kill all XIA services including orphaned services
 restart  stop then start the XIA network processes

Configure:
  -8 create an 8 port router (with -r)
  -t generate and use a generic host click script
  -r generate and use a generic router click script
  -n this node will be the name server
  -R this node will provide rendezvous service
  -i use the supplied name as the click element name and HID shortcut
  -f don't use interfaces matching the supplied string
	 (to ignore multiple interfaces, use a comma-separated list)
  -W connect via waveserver (ipaddr:port) on Arada box. MAC of DSRC Iface to use

Logging:
  -l syslog level (0=LOG_EMERG through 7=LOG_DEBUG) default=3 (LOG_ERR)
  -v prints click debug messages to stdout
  -V prints all daemon debug messages to stdout

Debugging:
  -c only start click
  -C start everything except click
  -g run click inside of valgrind
  -z start the visualizer client daemon, using the supplied address for the statserver
  -Z make this the visualizer server (runs statserver and xstats)

Advanced:
  -4 generate and use a dual stack click script
  -m manually set the node's 4ID IP address
  -P set the TCP socket ports to use (instead of ToDevice/FromDevice)
  -s run click using the specified script in the $CONFPATH directory.

EOH
	exit 0
}

get_last_config()
{
	for s in "$HOSTNAME.click" "router.click" "host.click" "dualstack_router.click" "dual_stack_host.click"; do
		if [ -e etc/click/$s ]; then
			SCRIPT=$s
		fi
	done
}

setup()
{
	local OPTARG=$2

	while getopts "cCl:s:qvV48nN:rRthi:m:f:z:ZP:gW:H" opt; do
		case $opt in
			c)
				CLICK_ONLY=1
				;;
			C)
				NO_CLICK=1
				;;
			l)
				LOG_FLAGS="$LOG_FLAGS -l $OPTARG"
				LOG_LEVEL=$OPTARG
				;;
			s)
				SCRIPT=$OPTARG
				;;
			V)
				VERBOSE=2
				LOG_FLAGS="$LOG_FLAGS -v"
				V_FLAG="-v"
				;;
			v)
				VERBOSE=1
				V_FLAG="-v"
				;;
			4)
				MAKECONF="dual$MAKECONF"
				CONFFLAGS="$CONFFLAGS -4"
				;;
			8)
				CONFFLAGS="$CONFFLAGS -8"
				;;
			r)
				MAKECONF=$MAKECONF"router"
				CONFFLAGS="$CONFFLAGS -r"
				NODETYPE="router"
				;;
			R)
				RENDEZVOUS=1
				;;
			t)
				MAKECONF=$MAKECONF"host"
				CONFFLAGS="$CONFFLAGS -t"
				NODETYPE="host"
				;;
			f)
				CONFFLAGS="$CONFFLAGS -f $OPTARG"
				;;
			m)
				CONFFLAGS="$CONFFLAGS -m $OPTARG"
				;;
			P)
				CONFFLAGS="$CONFFLAGS -P $OPTARG"
				;;
			i)
				HOSTNAME=$OPTARG
				;;
			n)
				NAMESERVER=1
				CONFFLAGS="$CONFFLAGS -n"
				;;
			N)
				NSHOST=$OPTARG
				NAMESERVER=1
				CONFFLAGS="$CONFFLAGS -n"
				;;
			W)
				REMOTEDSRC=1
				CONFFLAGS="$CONFFLAGS -W $OPTARG"
				L2_TYPE="dsrc"
				;;
			z)
				RUN_VISUALIZER_CLIENT=1
				VISUALIZER_SERVER=$OPTARG
				;;
			Z)
				RUN_VISUALIZER_CLIENT=1
				RUN_VISUALIZER_SERVER=1
				;;
			g)
				#VALGRIND="valgrind --log-file=$VGLOG --leak-check=yes --gen-suppressions=all"
				VALGRIND="valgrind --log-file=$VGLOG --leak-check=yes"
				;;
			h)
				help
				;;
			\?)
				printf "\nInvalid option: -$OPTARG\n" >&2
				help
				;;
		esac
	done

	case $MAKECONF in
		"")
			# try to use the last valid configuration
			get_last_config
			;;
		router)
			SCRIPT=router.click
			;;
		dualrouter)
			SCRIPT=dual_stack_router.click
			;;
		host)
			SCRIPT=host.click
			;;
		dualhost)
			SCRIPT=dual_stack_host.click
			;;
		*)
			echo ERROR: invalid node type: $MAKECONF
			exit 1
			;;
	esac
}

# sets global variable $XPID for the given process
# looks for process and hostname when matching if both given, otherwise
# just looks for the processname
# FIXME: seems like this could be smarter
get_pid()
{
	if [ $# = 1 ]; then
		local service=$1

		# FIXME: use pgrep if we can safely
		#
		# avoid false positives when editing a file with click in the name
		[ $service == "click" ] && service="userlevel/click"

		XPID=`ps -eo user,pid,args | grep -v grep | grep $service | tr -s " " | cut -d\  -f2`
	else
		XPID=`ps -eo user,pid,args | grep -v grep | grep $1 | grep $2 | tr -s " " | cut -d\  -f2`
	fi
}

#
# find out if the specified host:service pair is running
#
check_service()
{
	local state="stopped"
	local name="$1:$2:"
	[ $# == 1 ] && name="$1:"

	get_pid $1 $2
	[ "$XPID" != "" ] && state="running"
	printf "%-24s %s\n" $name $state
}

#
# kill the specified host:service pair
#
kill_service()
{
	local state="notrunning"
	local name="$1:$2:"
	[ $# == 1 ] && name="$1:"

	get_pid $1 $2
	if [ "$XPID" != "" ]; then
		kill $XPID
		state="stopped"
	fi
		printf "%-24s $state\n" $name
}

#
# nuke without mercy anything that looks like an XIA process
#
kill_all_services()
{
	check_all_services 1
	[ $ORPHANS -ne 1 ] && echo "nothing to kill" && exit 1

	echo "Killing all possible XIA related services..."
	for p in $ALL_PROCESSES
	do
		echo $p

		get_pid $p
		kill $XPID 2&> /dev/null
	done
	check_all_services 1
}

#
# see if any services are running, don't use nodes.conf
#
check_all_services()
{
	local skip=$1
	ORPHANS=0
	for p in $ALL_PROCESSES
	do
		get_pid $p
		if [ "$XPID" != "" ]; then
			ORPHANS=1
			echo "Orphan $p process found"
		fi
	done
	[ $ORPHANS -eq 1  ] && [ "$skip" != "1" ] && echo "Use xianet kill to stop orphaned processes"
}

#
# start/stop/check a router node
#
router()
{
	local host=$1
	local action=$2

	case $action in
		"start")
			cd $XIADIR/bin
			./xrouted -h $host $LOG_FLAGS &
			./xnetjd --accesspoint --layer2 $L2_TYPE --hostname $host -l $LOG_LEVEL $V_FLAG &
			./xcache -h $host $LOG_FLAGS &
			./stored &
			sleep 0.5
			;;
		"stop")
			kill_service $host "xrouted"
			kill_service $host "xnetjd"
			kill_service $host "xcache"
			kill_service "stored"
			;;
		"check")
			check_service $host "xrouted"
			check_service $host "xnetjd"
			check_service $host "xcache"
			check_service "stored"
			;;
		*)
			echo "unrecognized action: $action"
			;;
	esac
}

#
# start/stop/check a host node
#
host()
{
	local host=$1
	local action=$2

	cd $XIADIR/bin
	case $action in
		"start")
			./xnetjd --client --hostname $host  -l $LOG_LEVEL $V_FLAG &
			./xcache -h $host $LOG_FLAGS &
            ./stored &
			sleep 0.5
			;;
		"stop")
			kill_service $host "xnetjd"
			kill_service $host "xcache"
			kill_service "stored"
			;;
		"check")
			check_service $host "xnetjd"
			check_service $host "xcache"
			check_service "stored"
			;;
		*)
			echo "unrecognized action: $action"
			;;
	esac
}

#
# start/stop/check the nameserver
#
nameserver()
{
	local host=$1
	local action=$2

	cd $XIADIR/bin
	case $action in
		"start")
			./xnameservice -h $host $LOG_FLAGS &
			;;
		"stop")
			kill_service $host "xnameservice"
			;;
		"check")
			check_service $host "xnameservice"
			;;
		*)
			echo "unrecognized action: $action"
			;;
	esac
}

#
# start/stop/check the rendezvous server
#
rendezvous()
{
	local host=$1
	local action=$2

	DATASID=`cat $ADDRCONF |grep rendezvous|awk {'print $3'}`
	cd $XIADIR/bin
	case $action in
		"start")
			echo ./xrendezvous -h $host $LOG_FLAGS
			./xrendezvous -h $host -d $DATASID $LOG_FLAGS &
			;;
		"stop")
			kill_service $host "xrendezvous"
			;;
		"check")
			check_service $host "xrendezvous"
			;;
		*)
			echo "unrecognized action: $action"
			;;
	esac
}

#
# read etc/nodes.conf and perform the given action on each node
# assumes the first host found is the nameserver
# FIXME: work out a better solution for setting the name server in a local topology
#
process_nodes()
{
	local action=$1

	if [ ! -f $NODECONF ]; then
		echo "nodes.conf not found."
		check_all_services
		exit 1
	fi

	shopt -s nocasematch
	while read name type
	do
		case $type in
			XIAEndHost)
				host $name $action
				;;
			XIA*Router*Port)
				router $name $action
				;;
			nameserver)
				nameserver $name $action
				;;
			rendezvous)
				rendezvous $name $action
				;;
			*)
				echo Unknown device type $name:$type
				;;
		esac
	done < $XIADIR/etc/nodes.conf
	shopt -u nocasematch
}

#
# load click environment
#
start_click()
{
	get_pid "click"
	[ "$XPID" != "" ] && printf "Click is already running, aborting...\n" && exit 1

	if [ -z $SCRIPT ]; then
		printf "\nERROR: Unable to locate existing click script\n\n"
		help
	fi

	# create a click conf file from a template if necessary
	create_click_config
	printf "\nXIA using script: $SCRIPT\n"

	if [ ! -f $CONFPATH/$SCRIPT ]; then
		SNAME=`basename $SCRIPT .click`
		printf "\nERROR: unable to locate click conf file: $SNAME\n\n"
		exit 1
	fi

	# create nodes.conf from the click config file
	echo "Reading topology and generating $NODECONF"
	$XIADIR/bin/read_topology $CONFPATH/$SCRIPT $NODECONF

	# nameserver was configured on cmd line, add it to the nodes file so we control
	#  it properly
	if [ "$NSHOST" != "" ]; then
		printf "$NSHOST\tnameserver\n" >> $NODECONF
	#elif [ $NAMESERVER -eq 1 -a "$NODETYPE" == "host" ]; then
	elif [ $NAMESERVER -eq 1 ]; then
		printf "$HOSTNAME\tnameserver\n" >> $NODECONF
	fi

	if [ $RENDEZVOUS -eq 1 ]; then
		printf "$HOSTNAME\trendezvous\n" >> $NODECONF
	fi

	[ "$VALGRIND" != "" ] && echo Logging valgrind output to $VGLOG

	$VALGRIND $CLICK -R $CONFPATH/$SCRIPT &

	sleep 2

	get_pid "click"
	[ "$XPID" == "" ] && printf "Click is not running, aborting...\n" && exit 1

	sleep 2

	$XIADIR/bin/xlog $V_FLAG -l $LOG_LEVEL >/dev/null

	echo "Reading $NODECONF and assigning addresses in $ADDRCONF if needed"
	$XIADIR/bin/assign_addresses.py $NODECONF $ADDRCONF

	[ $CLICK_ONLY -eq 1 ] && check_service click && exit
}

#
# clean config files and keys
#
clean_conf_and_keys()
{
	# Verify that XIADIR is not empty
	if [ "$XIADIR" == "" ]; then
		echo "ERROR: XIADIR environment variable was empty"
		exit 1
	fi
	# Delete all keys and config files
	# NOTE: This deletes all application keys also
	echo "Deleting config files"
	rm -f $XIADIR/etc/click/host*.click
	rm -f $XIADIR/etc/click/router*.click
	echo "Deleting key files"
	rm -f $XIADIR/key/*
	echo "Deleting config files in etc"
	rm -f $XIADIR/etc/*.conf
	rm -f $XIADIR/etc/hosts.xia
	echo "Deleting temp files"
	sudo rm -f /tmp/xcache*
	echo "Deleting content files"
	sudo rm -f /tmp/content/*

}

#
# start/stop/check the visualizer daemons
#
visualizer()
{
	local action=$1

	case $action in
		"start")
			if [ $RUN_VISUALIZER_SERVER -eq 1 ]; then
				cd $XIADIR/daemons/visualizer
				./statsserver &
				sleep 1
			fi
			if [ $RUN_VISUALIZER_CLIENT -eq 1 ]; then
				FLAGS="-s $VISUALIZER_SERVER"
				if [ $VERBOSE -eq 2 ]; then
					FLAGS=$FLAGS" -v"
				fi
				cd $XIADIR/daemons/visualizer
				./xstats $FLAGS &
				sleep 1
			fi
			;;
		"stop")
			kill_service "statsserver"
			kill_service "xstats"
			;;
		"check")
			check_service "statsserver"
			check_service "xstats"
			;;
		*)
			echo "unrecognized action: $action"
			;;
	esac
}

#
# create a click config from the appropriate template using cmd line opts
#
create_click_config()
{
	case $MAKECONF in
		"")
			# using a predefined config file instead of a template
			return
			;;
		"host")
			SCRIPT=host.click
			;;
		"router")
			SCRIPT=router.click
			;;
		"dualhost")
			SCRIPT=dual_stack_host.click
			;;
		"dualrouter")
			SCRIPT=dual_stack_router.click
			;;
		*)
			echo "error unknown device type: $MAKECONF"
			exit 1
	esac

	CONFFLAGS="$CONFFLAGS -i $HOSTNAME"

	if [ ! -f $CONFPATH/$SCRIPT ]; then
		echo "Building configuration from template"
		python $XIADIR/bin/xconfig.py $CONFFLAGS
	else
		echo -n "NOTE: Config file $CONFPATH/$SCRIPT exists. "
		echo "Skipped building from template."
	fi
}

#
# SCRIPT STARTS HERE
#
#
if [ "$1" == "--version" ]; then
	echo xianet $VERSION
	exit 0
fi

setup $@
shift $((OPTIND-1))

case $1 in
	start)
		if [ "$NODETYPE" == "router" ] && [ "$NAMESERVER" == "0" ] && [ ! -f $RESOLVCONF ]; then
			echo "ERROR: $RESOLVCONF not found"
			echo "Copy resolv.conf from the nameserver host and start again"
			exit -1
		fi
		[ $NO_CLICK != 1 ] && start_click
		process_nodes "start"
		visualizer "start"
		check_service "click"
		process_nodes "check"
		visualizer "check"
		;;
	stop)
		process_nodes "stop"
		[ $NO_CLICK != 1 ] && kill_service "click"
		visualizer "stop"
		check_all_services
		rm -f /tmp/xcache*
		;;
	restart|reload)
		echo "Stopping XIA"
		process_nodes "stop"
		kill_service "click"
		visualizer "stop"
		echo "Starting XIA"
		start_click
		process_nodes "start"
		visualizer "start"
		check_service "click"
		process_nodes "check"
		visualizer "check"
		;;
	clean)
		clean_conf_and_keys
		;;
	check)
		check_service "click"
		process_nodes "check"
		visualizer "check"
		;;
	kill)
		kill_all_services
		;;
	*)
		printf "\nInvalid command\n" >&2
		help
		;;
esac
