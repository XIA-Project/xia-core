package edu.cmu.layouts {	import flash.geom.Point;	import flash.display.Stage;	import flash.events.Event;	import flash.utils.Dictionary;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.FileReference;	import edu.cmu.networkelements.NetworkElement;	public class CustomLayout extends Layout {				// Constants:		// Public Properties:		// Private Properties:		private var positionsByName:Dictionary;			// Initialization:		public function RandomLayout() {			positionsByName = new Dictionary();		}			// Public Methods:		public function LoadPointsFromFile(filepath:String) {			var fileLoader:URLLoader = new URLLoader();			fileLoader.addEventListener(Event.COMPLETE, onLoaded);			fileLoader.load(new URLRequest(filepath));		}				public function LoadPointsFromFileReference(fileRef:FileReference) {			fileRef.addEventListener(Event.COMPLETE, onLoaded);			fileRef.load();		}				// Protected Methods:		protected override function GetPointForElement(element:NetworkElement):Point {						var storedPoint:Point = positionsByName[element.GetElementName()];						if (storedPoint != null) {				return storedPoint;			} else {				var x:int = Math.random() * element.stage.stageWidth;				var y:int = Math.random() * element.stage.stageHeight;				return new Point(x, y);			}					}		private function parseLayoutFile(fileData:String):void {			var inputLines:Array = fileData.split(/\n/);			positionsByName = new Dictionary();	        			for each (var line:String in inputLines) {				var lineArray:Array = line.split(/,/);				if (lineArray.length != 3) { continue; }								positionsByName[lineArray[0]] = new Point(int(lineArray[1]), int(lineArray[2]));								trace(lineArray[0] + ":  " + positionsByName[lineArray[0]].x + ", " + positionsByName[lineArray[0]].y);			}		}				private function onLoaded(e:Event):void {						if (e.target.data is String) {				parseLayoutFile(e.target.data);			} else {				parseLayoutFile(e.target.data.readUTFBytes(e.target.data.length));			}		}	}	}