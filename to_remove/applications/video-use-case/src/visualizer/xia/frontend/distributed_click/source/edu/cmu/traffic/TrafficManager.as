package edu.cmu.traffic {	import flash.events.*;	import flash.net.*;	import flash.utils.Timer;	import flash.utils.Dictionary;	import edu.cmu.topology.Topology;	import edu.cmu.MyGlobal;	//import Math;		public class TrafficManager {				// Constants:		// Public Properties:				// Private Properties:		private var topology:Topology;		private var server:String;		private var timer:Timer;		private var globalMaxRate:int;			// Initialization:		public function TrafficManager(server:String, topology:Topology) { 			this.server = server;			this.topology = topology;			this.globalMaxRate = 0;		}			// Public Methods:				public function StartUpdating(frequency:int = 1):void {						timer = new Timer(frequency*1000);			timer.addEventListener(TimerEvent.TIMER, PullCurrentTrafficData);			timer.start();		}				public function StopUpdating():void {			timer.stop();		}				// Protected Methods:				private function PullCurrentTrafficData(e:TimerEvent):void {			// TODO: implement			//trace("\n\npulling current traffic data from " + MyGlobal.server + TrafficType.GetRequestString(MyGlobal.trafficType));						// TODO: remove this test code			//var elementsByID:Dictionary = topology.GetElementsByID();//			elementsByID["Host0"].UpdateOutboundTrafficForPort(0, GenerateTestTraffic());//			elementsByID["Host1"].UpdateOutboundTrafficForPort(0, GenerateTestTraffic());//			elementsByID["Host2"].UpdateOutboundTrafficForPort(0, GenerateTestTraffic());//			elementsByID["Router0"].UpdateOutboundTrafficForPort(0, GenerateTestTraffic());//			elementsByID["Router0"].UpdateOutboundTrafficForPort(1, GenerateTestTraffic());//			elementsByID["Router1"].UpdateOutboundTrafficForPort(0, GenerateTestTraffic());//			elementsByID["Router1"].UpdateOutboundTrafficForPort(1, GenerateTestTraffic());//			return;															var requestSender:URLLoader= new URLLoader();			requestSender.addEventListener(Event.COMPLETE, ReceivedCurrentTraffic);			var urlRequest:URLRequest = new URLRequest(MyGlobal.server + TrafficType.GetRequestString(MyGlobal.trafficType));						/* Setup HTTP Request */			//urlRequest.data = "blah";			//urlRequest.contentType = "application/x-www-form-urlencoded";			//urlRequest.method = URLRequestMethod.GET;			requestSender.load(urlRequest);		}				private function ReceivedCurrentTraffic(event:Event):void {   // TODO: handle traffic outbound from IP			var response:URLLoader = URLLoader(event.target);			//trace(response.data);			response.close(); 						var elementsByID:Dictionary = topology.GetElementsByID();			var portCounts:Array = response.data.split("\n");						for each (var portCountString:String in portCounts) {								// Format for portCountString:				// HID,port,in/out,ADrate,HIDrate,SIDrate,CIDrate,4IDrate,Otherrate,ADrate_management,HIDrate_m,SIDrate_m,CIDrate_m,4IDrate_m,Otherrate_m								var portCountArray:Array = portCountString.split(",");				if (portCountArray.length != 15) { continue; }								var hid:String = portCountArray[0];				var port:int = int(portCountArray[1]);				var direction:String = portCountArray[2];								if (direction == "IN" && port == 3) {  // TODO: port == 3 part is a big hack!!					port = elementsByID["IP"].GetLocalPortForElement(elementsByID[hid]);					hid = "IP";				}								if (elementsByID[hid] == null) { continue; }								var countsByType:Dictionary = new Dictionary();								countsByType["AD"] = int(portCountArray[3]);				countsByType["HID"] = int(portCountArray[4]);				countsByType["SID"] = int(portCountArray[5]);				countsByType["CID"] = int(portCountArray[6]);				countsByType["4ID"] = int(portCountArray[7]);				// TODO: We're ignoring "other" here...								if (MyGlobal.showManagementTraffic) {					countsByType["AD"] += int(portCountArray[9]);					countsByType["HID"] += int(portCountArray[10]);					countsByType["SID"] += int(portCountArray[11]);					countsByType["CID"] += int(portCountArray[12]);					countsByType["4ID"] += int(portCountArray[13]);				}								elementsByID[hid].UpdateOutboundTrafficForPort(port, countsByType);			}		}				private function GenerateTestTraffic():Dictionary {			var testTraffic:Dictionary = new Dictionary();			testTraffic["SID"] = Math.random() * 100;			testTraffic["CID"] = Math.random() * 100;			testTraffic["4ID"] = Math.random() * 100;			testTraffic["HID"] = 0;						return testTraffic;		}	}}